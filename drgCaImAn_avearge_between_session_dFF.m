%drgCaImAn_average_betweenSession_dFF averages the data between different
%sessions. It needs the output file generated by drgCaImAnBatchPerSession

close all
clear all

%This is not very god because it does not start at 50%
% handles.caimandr_choices.outFileName{1}='20180905_mmPVG04_Cerebellum_out.mat';
% handles.caimandr_choices.outPathName{1}='/Users/restrepd/Documents/Projects/MOM slidebook/mmPVG04/20180905_mmPVG04_Cerebellum/';

handles.caimandr_choices.outFileName{1}='20180910_mmPVG04_Cerebellum_bpsout.mat';
handles.caimandr_choices.outPathName{1}='/Users/restrepd/Documents/Projects/MOM slidebook/mmPVG04/20180910_mmPVG04_Cerebellum/';

handles.caimandr_choices.outFileName{2}='20181017_mmPVG05_Cerebellum_out.mat';
handles.caimandr_choices.outPathName{2}='/Users/restrepd/Documents/Projects/MOM slidebook/mmPVG05/20181017_mmPVG05_Cerebellum/';

handles.caimandr_choices.outFileName{3}='20180515_mmPVG02_Cerebellum_bpsout.mat';
handles.caimandr_choices.outPathName{3}='/Users/restrepd/Documents/Projects/MOM slidebook/mmPVG02/20180515_mmPVG02_Cerebellum/';

handles.caimandr_choices.outFileName{4}='test_caiman_batch_out.mat';
handles.caimandr_choices.outPathName{4}='/Users/restrepd/Documents/Projects/MOM slidebook/mmG7f09/20180711_mmG7f09-Cerebellum/';

%Excluded because of different timing, and because we were changing
%paramaters during this experiment
% handles.caimandr_choices.outFileName{5}='20180403_mmG06_Cerebellum_out.mat';
% handles.caimandr_choices.outPathName{5}='/Users/restrepd/Documents/Projects/MOM slidebook/mmG06/20180403_mmG06_Cerebellum/';

no_windows=3;
perCorr=25:10:95;
no_per_corr=length(perCorr);
no_epochs=4;
figNo=0;

%Hit, CR, Miss, FA, Miss, FA
line_colors{1}='r';
line_colors{2}='b';
line_colors{3}='c';
line_colors{4}='m';

epoch_label{1}='Hit';
epoch_label{2}='CR';
epoch_label{3}='Miss';
epoch_label{4}='FA';


%Plot Hit, CR, Miss, FA
for winNo=1:no_windows
    %These are for the anovan
    all_dFFmean=[];
    all_perCorr=[];
    all_epochs=[]
    dFFmean=zeros(no_per_corr,no_epochs,length(handles.caimandr_choices.outFileName)); %perCorr,win,epochs
    num_dFF=zeros(no_per_corr,no_epochs); %perCorr,win,epochs
    for mouseNo=1:length(handles.caimandr_choices.outFileName)
        load([handles.caimandr_choices.outPathName{mouseNo} handles.caimandr_choices.outFileName{mouseNo}])
        for epoch=1:no_epochs
            for perCorrNo=1:length(perCorr)
                
                if handles_out.mean_exists(winNo,perCorrNo,epoch)==1
                    num_dFF(perCorrNo,epoch)=num_dFF(perCorrNo,epoch)+1;
                    dFFmean(perCorrNo,epoch,mouseNo)=handles_out.mean_dFF(winNo,perCorrNo,epoch);
                    dFFmean_exist(perCorrNo,epoch,mouseNo)=1;
                    if num_dFF(perCorrNo,epoch)>2
                        all_dFFmean=[all_dFFmean handles_out.mean_dFF(winNo,perCorrNo,epoch)];
                        all_perCorr=[all_perCorr perCorrNo];
                        all_epochs=[all_epochs epoch];
                    end
                else
                    dFFmean_exist(perCorrNo,epoch,mouseNo)=0;
                end
            end
        end
    end
    
    %Do anovan
    [p,tbl,stats]=anovan(all_dFFmean,{all_perCorr all_epochs},'varnames',{'percent correct','epoch'},'display','off');
    fprintf(1, ['p value for anovan auROC window %d percent correct = %d\n'], winNo, p(1));
    fprintf(1, ['p value for anovan auROC window %d epoch = %d\n'], winNo, p(2));
    
    [p,tbl,stats]=anovan(all_dFFmean,{all_perCorr all_epochs},'model','interaction','varnames',{'percent correct','epoch'},'display','off');
    fprintf(1, ['p value for anovan auROC window %d interaction = %d\n\n'], winNo, p(3));
    %Plot dFF mean vs percent correct
    
    %Calculate mean and SEM
   
    try
        close(figNo+5)
    catch
    end
    
    for epochNo=4:-1:1
        
        
        try
            close(figNo+epochNo)
        catch
        end
        figure(figNo+epochNo)
        hold on
        
        %First plot the individual data points in light gray
        for mouseNo=1:length(handles.caimandr_choices.outFileName)
            last_perCorr=[];
            for perCorrNo=1:length(perCorr)
                if num_dFF(perCorrNo,epochNo)>=1
                    plot(perCorr(perCorrNo),dFFmean(perCorrNo,epochNo,mouseNo),'o','MarkerFaceColor',[0.7 0.7 0.7],'MarkerEdgeColor',[0.7 0.7 0.7])
                    if ~isempty(last_perCorr)
                        plot([perCorr(perCorrNo-1) perCorr(perCorrNo)],[dFFmean(perCorrNo-1,epochNo,mouseNo) dFFmean(perCorrNo,epochNo,mouseNo)],'-','Color',[0.7 0.7 0.7])
                    end
                    last_perCorr=perCorrNo;
                else
                    last_perCorr=[];
                end
                
            end
        end
        
        %Then plot the mean and SEM
        last_perCorr=[];
        last_meandFF=[];
        for perCorrNo=1:length(perCorr)
            if num_dFF(perCorrNo,epochNo)>2
                this_meandFF=zeros(1,1);
                this_SEMdFF=zeros(1,1);
                this_meandFF(1,1)=mean(dFFmean(perCorrNo,epochNo,:),3);
                this_SEMdFF(1,1)=std(dFFmean(perCorrNo,epochNo,:))/sqrt(num_dFF(perCorrNo,1));
                errorbar(perCorr(perCorrNo),this_meandFF,this_SEMdFF,['o' line_colors{epochNo}])
                if ~isempty(last_perCorr)
                    plot([last_perCorr perCorr(perCorrNo)],[last_meandFF this_meandFF],['-' line_colors{epochNo}])
                end
                last_perCorr=perCorr(perCorrNo);
                last_meandFF=this_meandFF;
            else
                last_perCorr=[];
                last_meandFF=[];
            end
        end
        
        
        title(['dF/F for window No ' num2str(winNo) ' for ' epoch_label{epochNo}])
        xlabel('Percent correct')
        ylabel('dF/F')
        ylim([-0.1 0.6])
        xlim([40 100])
        
        
        %Then plot the mean and SEM in the overall figure
        figure(figNo+5)
        hold on
        last_perCorr=[];
        last_meandFF=[];
        for perCorrNo=1:length(perCorr)
            if num_dFF(perCorrNo,epochNo)>2
                this_meandFF=zeros(1,1);
                this_SEMdFF=zeros(1,1);
                this_meandFF(1,1)=mean(dFFmean(perCorrNo,epochNo,:),3);
                this_SEMdFF(1,1)=std(dFFmean(perCorrNo,epochNo,:))/sqrt(num_dFF(perCorrNo,1));
                errorbar(perCorr(perCorrNo),this_meandFF,this_SEMdFF,['o' line_colors{epochNo}])
                if ~isempty(last_perCorr)
                    plot([last_perCorr perCorr(perCorrNo)],[last_meandFF this_meandFF],['-' line_colors{epochNo}])
                end
                last_perCorr=perCorr(perCorrNo);
                last_meandFF=this_meandFF;
            else
                last_perCorr=[];
                last_meandFF=[];
            end
        end
        
        if epochNo==1
            title(['dF/F for window No ' num2str(winNo)])
            xlabel('Percent correct')
            ylabel('dF/F')
            ylim([-0.1 0.6])
            xlim([40 100])
        end
    end
    
    figNo=figNo+5;
    
end


%Plot S+ S-
no_epochs=2;
epoch_labelspm{1}='S+';
epoch_labelspm{2}='S-';
p_vals_t=[];
p_vals_anova=[];
for winNo=1:no_windows
    %These are for the anovan
    all_dFFmean=[];
    all_perCorr=[];
    all_epochs=[]
    dFFmean=zeros(no_per_corr,no_epochs,length(handles.caimandr_choices.outFileName)); %perCorr,win,epochs
    num_dFF=zeros(no_per_corr,no_epochs); %perCorr,win,epochs
    for mouseNo=1:length(handles.caimandr_choices.outFileName)
        load([handles.caimandr_choices.outPathName{mouseNo} handles.caimandr_choices.outFileName{mouseNo}])
        for epoch=1:no_epochs
            for perCorrNo=1:length(perCorr)
                
                if handles_out.mean_existsspm(winNo,perCorrNo,epoch)==1
                    num_dFF(perCorrNo,epoch)=num_dFF(perCorrNo,epoch)+1;
                    dFFmean(perCorrNo,epoch,mouseNo)=handles_out.mean_dFFspm(winNo,perCorrNo,epoch);
                    dFFmean_exist(perCorrNo,epoch,mouseNo)=1;
                    if num_dFF(perCorrNo,epochNo)>2
                        all_dFFmean=[all_dFFmean handles_out.mean_dFFspm(winNo,perCorrNo,epoch)];
                        all_perCorr=[all_perCorr perCorrNo];
                        all_epochs=[all_epochs epoch];
                    end
                else
                    dFFmean_exist(perCorrNo,epoch,mouseNo)=0;
                end
            end
        end
    end
    
    %Do anovan
    [p,tbl,stats]=anovan(all_dFFmean,{all_perCorr all_epochs},'varnames',{'percent correct','epoch'},'display','off');
    fprintf(1, ['p value for anovan auROC window %d percent correct = %d\n'], winNo, p(1));
    fprintf(1, ['p value for anovan auROC window %d epoch = %d\n'], winNo, p(2));
    
    figNo=figNo+1;
    figure(figNo)
    results = multcompare(stats,'Dimension',[2 1]);
    
    [p,tbl,stats]=anovan(all_dFFmean,{all_perCorr all_epochs},'model','interaction','varnames',{'percent correct','epoch'},'display','off');
    fprintf(1, ['p value for anovan auROC window %d interaction = %d\n\n'], winNo, p(3));
    %Plot dFF mean vs percent correct
    
    %Calculate mean and SEM
   
    try
        close(figNo+3)
    catch
    end
    glm_dFF=[];
    glm_dFF_ii=0;
    ii_dFF_stats=0;
    p_dFF_stats=[];
        
    for epochNo=2:-1:1
        
        
        try
            close(figNo+epochNo)
        catch
        end
        figure(figNo+epochNo)
        hold on
        
        %First plot the individual data points in light gray
        for mouseNo=1:length(handles.caimandr_choices.outFileName)
            last_perCorr=[];
            for perCorrNo=1:length(perCorr)
                if num_dFF(perCorrNo,epochNo)>=1
                    plot(perCorr(perCorrNo),dFFmean(perCorrNo,epochNo,mouseNo),'o','MarkerFaceColor',[0.7 0.7 0.7],'MarkerEdgeColor',[0.7 0.7 0.7])
                    if ~isempty(last_perCorr)
                        plot([perCorr(perCorrNo-1) perCorr(perCorrNo)],[dFFmean(perCorrNo-1,epochNo,mouseNo) dFFmean(perCorrNo,epochNo,mouseNo)],'-','Color',[0.7 0.7 0.7])
                    end
                    last_perCorr=perCorrNo;
                else
                    last_perCorr=[];
                end
                
            end
            pffft=1;
        end
         
        %Then plot the mean and SEM
        last_perCorr=[];
        last_meandFF=[];
        for perCorrNo=1:length(perCorr)
            if num_dFF(perCorrNo,epochNo)>2
                this_meandFF=zeros(1,1);
                this_SEMdFF=zeros(1,1);
                this_meandFF(1,1)=mean(dFFmean(perCorrNo,epochNo,:),3);
                this_SEMdFF(1,1)=std(dFFmean(perCorrNo,epochNo,:))/sqrt(num_dFF(perCorrNo,1));
                errorbar(perCorr(perCorrNo),this_meandFF,this_SEMdFF,['o' line_colors{epochNo}])
                if ~isempty(last_perCorr)
                    plot([last_perCorr perCorr(perCorrNo)],[last_meandFF this_meandFF],['-' line_colors{epochNo}])
                end
                last_perCorr=perCorr(perCorrNo);
                last_meandFF=this_meandFF;
            else
                last_perCorr=[];
                last_meandFF=[];
            end
        end
        
        
        title(['dF/F for window No ' num2str(winNo) ' for ' epoch_labelspm{epochNo}])
        xlabel('Percent correct')
        ylabel('dF/F')
        ylim([-0.1 0.6])
        xlim([40 100])
        
        
        %Then plot the mean and SEM in the overall figure and save data for a glm
        figure(figNo+3)
        hold on
        last_perCorr=[];
        last_meandFF=[];
        for perCorrNo=1:length(perCorr)
            if num_dFF(perCorrNo,epochNo)>2
                this_meandFF=zeros(1,1);
                this_SEMdFF=zeros(1,1);
                this_meandFF(1,1)=mean(dFFmean(perCorrNo,epochNo,:),3);
                these_dffs=zeros(1,length(dFFmean(perCorrNo,epochNo,:)));
                these_dffs(:,:)=dFFmean(perCorrNo,epochNo,:);
                
                glm_dFF.data(glm_dFF_ii+1:glm_dFF_ii+length(dFFmean(perCorrNo,epochNo,:)))=these_dffs;
                glm_dFF.perCorr(glm_dFF_ii+1:glm_dFF_ii+length(dFFmean(perCorrNo,epochNo,:)))=perCorr(perCorrNo);
                glm_dFF.epochNo(glm_dFF_ii+1:glm_dFF_ii+length(dFFmean(perCorrNo,epochNo,:)))=epochNo;
                glm_dFF_ii=glm_dFF_ii+length(dFFmean(perCorrNo,epochNo,:));
                ii_dFF_stats=ii_dFF_stats+1;
                p_dFF_stats(ii_dFF_stats).data=these_dffs;
                p_dFF_stats(ii_dFF_stats).description=[num2str(perCorr(perCorrNo)) '%% '  epoch_labelspm{epochNo}];
                
                this_SEMdFF(1,1)=std(dFFmean(perCorrNo,epochNo,:))/sqrt(num_dFF(perCorrNo,1));
                CIdFF = bootci(1000, {@mean, these_dffs})';
                plot(perCorr(perCorrNo),this_meandFF,['o' line_colors{epochNo}],'LineWidth', 2)
                plot([perCorr(perCorrNo) perCorr(perCorrNo)],CIdFF,['-' line_colors{epochNo}],'LineWidth', 2)
                %errorbar(perCorr(perCorrNo),this_meandFF,this_SEMdFF,['o' line_colors{epochNo}])
                if ~isempty(last_perCorr)
                    plot([last_perCorr perCorr(perCorrNo)],[last_meandFF this_meandFF],['-' line_colors{epochNo}],'LineWidth', 2)
                end
                last_perCorr=perCorr(perCorrNo);
                last_meandFF=this_meandFF;
            else
                last_perCorr=[];
                last_meandFF=[];
            end
        end
        
        if epochNo==1
            title(['dF/F for S+ and S- window No ' num2str(winNo)])
            xlabel('Percent correct')
            ylabel('dF/F')
            ylim([-0.1 0.8])
            xlim([40 100])
        end
        
     
        
    end
    
        %Perform the glm for dimensionality normalized to peal pre-odor, not
    %separated per experiment
    fprintf(1, ['\n\nglm for dFF for window No ' num2str(winNo) '\n'])
    tbl = table(glm_dFF.data',glm_dFF.perCorr',glm_dFF.epochNo',...
        'VariableNames',{'dFF','percent_correct','spm'});
    mdl = fitglm(tbl,'dFF~percent_correct+spm+percent_correct*spm'...
        ,'CategoricalVars',[3])
    
    %Note: No post-hoc t-test/ranksum becuse there are only three points for
    %each experimental set
%         Do ranksum/t test
    fprintf(1, ['\n\nRanksum or t-test p values for dFF for window No ' num2str(winNo) '\n'])
    try
        [output_data] = drgMutiRanksumorTtest(p_dFF_stats);
        fprintf(1, '\n\n')
    catch
    end
    

    figNo=figNo+3;
    
end
pFDRanova=drsFDRpval(p_vals_anova);
fprintf(1, ['\npFDR for anova  = %d\n\n'],pFDRanova);



pffft=1