%% drgCaImAn_dropc_correlation.m
%
% Needs as an input the ouput file from drgCaImAn_script
%
close all
clear all

%% choices
plot_raw=1;
ref_win=[-5 -1.5];
um_per_pixel=0.489;

%Choose dropc program

% 1 dropc_nsampler_piriform

% 2 dropcspm_hf before 2/23/2018

% 3 dropcspm_hf after 2/24/2018
%
%  handles.dropcData.epochEvent
% 1 - FV on
% 2 - odor on
% 3 - odor off
% 4 - reinforcement on
% 5 - reinforcement off
% 6 - Hit
% 7 - Miss
% 8 - FA
% 9 - CR

dropc_program=3; 


%% Get the raw and inferred traces generated by drgCaimAn_script
[fnameca,pnameca,nCancel] = uigetfile({'*CalmAn.mat;*CalmAn_warped.mat'},'Select the output file from CaimAn...');
if nCancel
    inputPath = [pnameca,fnameca];
    pnameStart = pnameca;
    %save('timeCorr_cfg.mat','pnameStart','-append');
else
    error('Cancelled')
end


CaimAn_name=[pnameca fnameca];

load(CaimAn_name)
dt=1/options.fr;

%Calculate the center of mass (coms) for each component
%and draw the components and  their locations
thr = 0.95;
d1 = options.d1;
d2 = options.d2;

%Draw the components for the first image
try
    close 6
catch
end
figure(6)

cla
imagesc(2*Cn); axis equal; axis tight; axis off; hold on;
Cn1x2=2*Cn;


%Find the number of components
szA_or=size(A_or);
coms=[];
num_coms=0;

for i=1:szA_or(2)
    A_temp = full(reshape(A_or(:,i),d1,d2));
    A_temp = medfilt2(A_temp,[3,3]);
    A_temp = A_temp(:);
    [temp,ind] = sort(A_temp(:).^2,'ascend');
    temp =  cumsum(temp);
    ff = find(temp > (1-thr)*temp(end),1,'first');
    if ~isempty(ff)
        [contour_properties,ww] = contour(reshape(A_temp,d1,d2),[0,0]+A_temp(ind(ff)),'LineColor','k');
        ww.LineWidth = 2;
        num_coms=num_coms+1;
        coms(1,num_coms)=mean(contour_properties(1,2:end));
        coms(2,num_coms)=mean(contour_properties(2,2:end)); 
        plot(coms(1,num_coms),coms(2,num_coms),'.r')
    end
end

title(['Components for ' fnameca])
fnameca1=fnameca;

%Get the traces
[raw,inferred]=drgGetCAtraces(Yr,A_or,C_or,b2,f2,Cn,options);

% In order to understand what these variables are take a look at
% plot_components_GUI.m under CaImAn-MATLAB/utilities
% CaImAn calls ROIs "components"
% Yr hs the 6000 images in a vector of 65536 pixels
% A_or has the image of each component e.g. 65536x158 double for 256x256
% images of 85 components
% C_or these are the inferred traces for each component
% b2 are one or two images
% f2 are one or two traces
% Cn is the correlation image e.g. 256x256

% Should we use raw or inferred?
if plot_raw==1
    traces=raw;
else
    traces=inferred;
end
 
sz_traces=size(traces);
no_traces=sz_traces(1);
no_images=sz_traces(2);

fprintf(1, ['\ndrgCaImAn_dropc run for ' fnameca '\n\n']);
%% Get the timing from dropc

% Get dropcnsampler path and filename from user
[fname,pname,nCancel] = uigetfile({'*spm.mat'},'Select the dropcspm_hf or dropcnsampler output file...');
if nCancel
    inputPath = [pname,fname];
    pnameStart = pname;
    %save('timeCorr_cfg.mat','pnameStart','-append');
else
    error('Cancelled')
end

load([pname fname])

%% Get the lick from the rhd file
%% Get the rhd file name
[fnamerhd,pnamerhd,nCancel] = uigetfile({'*.rhd'},'Select the rhd file...');
if nCancel
    inputPathrhd = [pnamerhd,fnamerhd];
    pnameStartrhd = pnamerhd;
    %save('timeCorr_cfg.mat','pnameStart','-append');
else
    error('Cancelled')
end


rhd_name=[pnamerhd fnamerhd];
[adc_in,digital_in,acq_rate]=drg_read_Intan_RHD2000_file(rhd_name,3);


%% Plot the traces

these_lines{1}='-b';
these_lines{2}='-r';
these_lines{3}='-m';
these_lines{8}='-g';
these_lines{5}='-y';
these_lines{6}='-k';
these_lines{7}='-c';
these_lines{4}='-k';

try
    close 1
catch
end

hFig1 = figure(1);
set(hFig1, 'units','normalized','position',[.05 .1 .85 .8])

hold on
 
% Determine the y spacing of the traces
y_shift=1.2*(prctile(traces(:),95)-prctile(traces(:),5));

%Plot the event lines
odor_on_times=[];
ootii=0;
switch dropc_program
    case 1
        for event=2:handles.dropcData.eventIndex
            plot([handles.dropcData.eventTime(event) handles.dropcData.eventTime(event)], [0 (no_traces+2)*y_shift],...
                these_lines{handles.dropcData.odorNo(event)},'LineWidth',1)
        end
    case 2
        for event=1:handles.dropcData.allTrialIndex
            plot([handles.dropcData.allTrialTime(event)-2.5 handles.dropcData.allTrialTime(event)-2.5], [0 (no_traces+2)*y_shift],...
                these_lines{handles.dropcData.odorType(event)},'LineWidth',1)
        end
    case 3
        %For S+ and S- plot odor on and reinforcement
        for epoch=1:handles.dropcData.epochIndex
            %Epoch 2 is odor on, 3 is odor off
            plot_epoch=(handles.dropcData.epochEvent(epoch)==2)||(handles.dropcData.epochEvent(epoch)==3);
            if plot_epoch
                if handles.dropcData.epochTypeOfOdor(epoch)==handles.dropcProg.splusOdor
                    plot([handles.dropcData.epochTime(epoch) handles.dropcData.epochTime(epoch)], [0 (no_traces+2)*y_shift],...
                        '-r','LineWidth',1)
                else
                    plot([handles.dropcData.epochTime(epoch) handles.dropcData.epochTime(epoch)], [0 (no_traces+2)*y_shift],...
                        '-b','LineWidth',1)
                end
                if (handles.dropcData.epochEvent(epoch)==2)
                    ootii=ootii+1;
                    odor_on_times(ootii)=handles.dropcData.epochTime(epoch);
                end
            end
            
            
        end
end


%Align the rhd times with the olfactometer
 
%Find the FV, odor on and odor off events in digital_in recorded by INTAN
ii=1;
at_end=0;
odor_on_times_rhd=[];
FV_times_rhd=[];
odor_off_times_rhd=[];
iioon=0;
iiFV=0;
iiooff=0;
digital_in=bitand(digital_in,2+4+8+16);
while at_end==0
    ii_FV=find(digital_in(ii:end)==6,1,'first');
    if isempty(ii_FV)
        at_end=1;
    else
        %FV
        ii=ii+ii_FV-1;
        iiFV=iiFV+1;
        FV_times_rhd(iiFV)=ii/acq_rate;
        
        %Odor on
        ii_odor_on=find(digital_in(ii:end)==18,1,'first');
        %Odor off
        ii_odor_off=find(digital_in(ii:end)<18,1,'first');
        
        if (~isempty(ii_odor_on))&(~isempty(ii_odor_off))
            
            %Odor on
            ii=ii+ii_odor_on-1;
            iioon=iioon+1;
            odor_on_times_rhd(iioon)=ii/acq_rate;
            
            %Odor off
            
            ii=ii+ii_odor_off-1;
            iiooff=iiooff+1;
            odor_off_times_rhd(iiooff)=ii/acq_rate;

            ii=ii+1;
            if ii>=length(digital_in)
                at_end=1;
            end
        else
            at_end=1;
        end
    end
end

%Find the alignment of the rhd vs the olfactometer times
if length(odor_on_times)<length(odor_on_times_rhd)
    sum_delta=[];
    for ii=0:length(odor_on_times_rhd)-length(odor_on_times)
        sum_delta(ii+1)=abs(sum(odor_on_times_rhd(1+ii:ii+length(odor_on_times))-odor_on_times));
    end
    [min_del min_jj]=min(sum_delta);
    odor_on_times_rhd=odor_on_times_rhd(min_jj:min_jj+length(odor_on_times)-1);
end
delta_t_rhd=mean(odor_on_times-odor_on_times_rhd);

%Plot the licks recorded by the INTAN (adc_in)
time_rhd=([1:length(digital_in)]/acq_rate)+delta_t_rhd;
pct998=prctile(adc_in,99.8);
pct1=prctile(adc_in,1);
norm_fact=0.8*y_shift/(pct998-pct1);

plot(time_rhd(time_rhd>0),adc_in(time_rhd>0)*norm_fact)

%Plot the traces
time=[1:no_images]*dt;
for trNo=1:no_traces
% for trNo=1:20
    plot(time,traces(trNo,:)+y_shift*trNo,'-k','LineWidth',1)
end

ylim([-y_shift*0.2 (no_traces+2)*y_shift])
xlabel('time (s)')
ylabel('deltaF/F')
title(fnameca(1:end-4))




dt_before=10;
dt_after=20;

%Uncomment this to show a subset of traces
%This code is here to explore the individual traces and licks
% first_trace=1;
% last_trace=20;
% trialNo_start=1;
% trialNo_end=5;
% xlim([odor_on_times(trialNo_start)-dt_before odor_on_times(trialNo_end)+dt_after])
% ylim([y_shift*(first_trace-1) y_shift*last_trace])
% title(['deltaF/f for traces ' num2str(first_trace) ' to ' num2str(last_trace) ])
% set(hFig1, 'units','normalized','position',[.05 .05 .3 .85])

%Compute the correlations and distances
no_rhos=0;
for trNo1=1:no_traces
    for trNo2=trNo1+1:no_traces
        no_rhos=no_rhos+1;
        rho_trNo1(no_rhos)=trNo1;
        rho_trNo2(no_rhos)=trNo2;
        rhos_tr_pair(no_rhos)=corr(traces(trNo1,:)',traces(trNo2,:)');
        pair_distance(no_rhos)=um_per_pixel*sqrt((coms(1,trNo1)-coms(1,trNo2))^2+(coms(2,trNo1)-coms(2,trNo2))^2);
    end
end

%Plot a histogram of rho
figure(2)
edges=[-0.6:0.05:1.1];
histogram(rhos_tr_pair,edges)
title('rho')
xlabel('rho')
ylabel('Number of component pairs')
yl=ylim;
hold on
plot([mean(rhos_tr_pair) mean(rhos_tr_pair)],yl,'-k')

%Plot a histogram of the intersomatic distance
figure(3)
edges=[0:5:250];
histogram(pair_distance,edges)
title('Intersomatic distance')
xlabel('Distance (um)')
ylabel('Number of component pairs')
yl=ylim;
hold on
plot([mean(pair_distance) mean(pair_distance)],yl,'-k')

ii=0;
for inter_d=0:5:250
    if sum((pair_distance>inter_d)&(pair_distance<=inter_d+5))>0
    ii=ii+1;
    i_dist(ii)=inter_d+2.5;
    mean_rho(ii)=mean(rhos_tr_pair((pair_distance>inter_d)&(pair_distance<=inter_d+5)));
    std_rho(ii)=std(rhos_tr_pair((pair_distance>inter_d)&(pair_distance<=inter_d+5)));
    end
end

figure(4)
[hl1, hp1] = boundedline(i_dist,mean_rho,std_rho, 'r');
title('rho vs intersomal distance')
xlabel('Inter somal distance (um)')
ylabel('rho')

%Ask the user to enter the average image
[fnameavg,pnameavg,nCancel] = uigetfile({'*.tif'},'Select the average tif file...');
if nCancel
    inputPathavg = [pnameavg,fnameavg];
    pnameStartavg = pnameavg;
    %save('timeCorr_cfg.mat','pnameStart','-append');
else
    error('Cancelled')
end

try
    close 5
catch
end
figure(5)

avgim=imread([pnameavg fnameavg]);
image(0.03*avgim)

%Ask the user to enter the line for neurite direction
h=msgbox('Now enter the two points for the line for neurite direction','neurites');
[fx1, fy1]= ginput(1);
[fx2, fy2]= ginput(1);
hold on
plot([fx1 fx2],[fy1 fy2],'-r','LineWidth',2)

slope=(fy1-fy2)/(fx1-fx2);
intercept=fy1-slope*fx1;

%Plot the line in figure 6
figure(6)
hold on
plot([fx1 fx2],[fy1 fy2],'-r','LineWidth',2)

% %Now draw the components and get their locations
% thr = 0.95;
% d1 = options.d1;
% d2 = options.d2;
% 
% %Draw the components for the first image
% try
%     close 6
% catch
% end
% figure(6)
% 
% cla
% imagesc(2*Cn); axis equal; axis tight; axis off; hold on;
% Cn1x2=2*Cn;
% 
% 
% %Find the number of components
% szA_or=size(A_or);
% coms=[];
% num_coms=0;
% 
% for i=1:szA_or(2)
%     A_temp = full(reshape(A_or(:,i),d1,d2));
%     A_temp = medfilt2(A_temp,[3,3]);
%     A_temp = A_temp(:);
%     [temp,ind] = sort(A_temp(:).^2,'ascend');
%     temp =  cumsum(temp);
%     ff = find(temp > (1-thr)*temp(end),1,'first');
%     if ~isempty(ff)
%         [contour_properties,ww] = contour(reshape(A_temp,d1,d2),[0,0]+A_temp(ind(ff)),'LineColor','k');
%         ww.LineWidth = 2;
%         num_coms=num_coms+1;
%         coms(1,num_coms)=mean(contour_properties(1,2:end));
%         coms(2,num_coms)=mean(contour_properties(2,2:end)); 
%         plot(coms(1,num_coms),coms(2,num_coms),'.r')
%     end
% end
% 
% plot([fx1 fx2],[fy1 fy2],'-r','LineWidth',2)
% 
% title(['Components for ' fnameca])
% fnameca1=fnameca;



% plot([fx1 fx2],[slope*fx1+intercept slope*fx2+intercept],'-r') 
 
% Parallel components
no_parallel=0;
parallel_pairs=[];
um_band=5;
band_pixels=um_band/um_per_pixel;
dy=abs(band_pixels/(cos(atan(slope))));
dx=abs(band_pixels/(cos((pi/2)-atan(slope))));
for ii=1:num_coms
    for jj=ii+1:num_coms
        %Find the line for ii
        this_intercept=coms(2,ii)-slope*coms(1,ii);
        if (abs(coms(1,jj)*slope+this_intercept-coms(2,jj))<=dy)&(abs(((coms(2,jj)-this_intercept)/slope)-coms(1,jj))<=dx)
            
            no_parallel=no_parallel+1;
            parallel_pairs(1,no_parallel)=ii;
            parallel_pairs(2,no_parallel)=jj;
            rhos_tr__parallel_pair(no_parallel)=corr(traces(ii,:)',traces(jj,:)');
            pair_distance_parallel(no_parallel)=um_per_pixel*sqrt((coms(1,ii)-coms(1,jj))^2+(coms(2,ii)-coms(2,jj))^2);
            plot([coms(1,ii) coms(1,jj)],[coms(2,ii) coms(2,jj)],'-k','LineWidth',1)
            pffft=1;
        end
    end
end
    
plot([150 150+(20/um_per_pixel)],[220 220],'-r','LineWidth',3)

try
    close 7
catch
end
figure(7)
hold on

plot(pair_distance_parallel,rhos_tr__parallel_pair,'.b')
[p,S] = polyfit(pair_distance_parallel(rhos_tr__parallel_pair>0.5),rhos_tr__parallel_pair(rhos_tr__parallel_pair>0.5),1); 
[y_fit,delta] = polyval(p,pair_distance_parallel(rhos_tr__parallel_pair>0.5),S);
plot(pair_distance_parallel(rhos_tr__parallel_pair>0.5),y_fit,'r-')
%plot(pair_distance_parallel,y_fit+2*delta,'m--',pair_distance_parallel,y_fit-2*delta,'m--')
title('Linear Fit of rho along')
xlabel('inter soma distance (um)')
ylabel('rho')


% Perpendicular components slope=-1/slope
try
    close 8
catch
end
figure(8)


cla
imagesc(2*Cn); axis equal; axis tight; axis off; hold on;

for i=1:szA_or(2)
    A_temp = full(reshape(A_or(:,i),d1,d2));
    A_temp = medfilt2(A_temp,[3,3]);
    A_temp = A_temp(:);
    [temp,ind] = sort(A_temp(:).^2,'ascend');
    temp =  cumsum(temp);
    ff = find(temp > (1-thr)*temp(end),1,'first');
    if ~isempty(ff)
        [~,ww] = contour(reshape(A_temp,d1,d2),[0,0]+A_temp(ind(ff)),'LineColor','k');
        ww.LineWidth = 2;
    end
end

%Enter a 20 um bar
plot([150 150+(20/um_per_pixel)],[220 220],'-r','LineWidth',3)
title(['Components for ' fnameca])

no_perpendicular=0;
perpendicular_pairs=[];
slope_per=-1/slope;
dy=abs(band_pixels/(cos(atan(slope_per))));
dx=abs(band_pixels/(cos((pi/2)-atan(slope_per))));
for ii=1:num_coms
    for jj=ii+1:num_coms
        %Find the line for ii
        this_intercept=coms(2,ii)-slope_per*coms(2,ii);
        if (abs(coms(1,jj)*slope_per+this_intercept-coms(2,jj))<=dy)&(abs(((coms(2,jj)-this_intercept)/slope_per)-coms(1,jj))<=dx)
            no_perpendicular=no_perpendicular+1;
            perpendicular_pairs(1,no_perpendicular)=ii;
            perpendicular_pairs(2,no_perpendicular)=jj;
               rhos_tr__perpendicular_pair(no_perpendicular)=corr(traces(ii,:)',traces(jj,:)');
            pair_distance_perpendicular(no_perpendicular)=um_per_pixel*sqrt((coms(1,ii)-coms(1,jj))^2+(coms(2,ii)-coms(2,jj))^2);
            plot([coms(1,ii) coms(1,jj)],[coms(2,ii) coms(2,jj)],'-k','LineWidth',1)
        end
    end
end
        
plot([fx1 fx2],[fy1 fy2],'-r','LineWidth',2)

%Now plot the correlation values for parallel vs. perpendicular
try
    close 9
catch
end
figure(9)
hold on

plot(pair_distance_perpendicular,rhos_tr__perpendicular_pair,'.b')
[p,S] = polyfit(pair_distance_perpendicular(rhos_tr__perpendicular_pair>0.5),rhos_tr__perpendicular_pair(rhos_tr__perpendicular_pair>0.5),1); 
[y_fit,delta] = polyval(p,pair_distance_perpendicular(rhos_tr__perpendicular_pair>0.5),S);
plot(pair_distance_perpendicular(rhos_tr__perpendicular_pair>0.5),y_fit,'r-')
%plot(pair_distance_perpendicular,y_fit+2*delta,'m--',pair_distance_perpendicular,y_fit-2*delta,'m--')
title('Linear Fit of rho orthogonal')
xlabel('inter soma distance (um)')
ylabel('rho')

%Calculate the covariance matrix
COV=cov(traces');
dFF_change=prctile(traces',95)-prctile(traces',5); %This is used to simulate Ca Changes
save([pnameca fnameca(1:end-4) '_COV.mat'],'COV','dFF_change')
pfft=1;

