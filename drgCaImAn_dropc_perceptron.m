%% drgCaImAn_dropc_perceptron
close all
clear all

plot_raw=1;
%% Get the data traces generated by drgCaimAn_dropc_plot
[fnameca,pnameca,nCancel] = uigetfile({'_pre_per.mat'},'Select the output file from CaimAn...');
if nCancel
    inputPath = [pnameca,fnameca];
    pnameStart = pnameca;
    %save('timeCorr_cfg.mat','pnameStart','-append');
else
    error('Cancelled')
end


CaimAn_name=[pnameca fnameca];

load(CaimAn_name)

close(1)

szpit=size(per_input_timecourse);
num_time_points=szpit(1);
num_traces=szpit(2);
num_trials=szpit(3);


%Do perceptron prediction analysis for every point in the timecourse
for time_point=1:length(time_to_event)
    per_input=zeros(num_traces,num_trials);
    per_input(:,:)=per_input_timecourse(time_point,:,:);

    
    %Perceptron
    %leave one out
    test_out=[];
    shuffled_out=[];
    
    %Do perceptron analysis for each trial
    for ii=1:per_ii
        
        %Create input and target vectors leaving one trial out
        %For per_input each column has the dF/F for one trial
        %each row is a single time point for dF/F for one of the cells
        %For per_target the top row is 1 if the odor is S+ and 0 if it is
        %S-, and row 2 has 1 for S-
        this_per_input=[];
        this_per_targets=[];
        if ii==1
            this_per_input=per_input(:,2:end);
            this_per_targets=per_targets(:,2:end);
        else
            if ii==per_ii
                this_per_input=per_input(:,1:end-1);
                this_per_targets=per_targets(:,1:end-1);
            else
                this_per_input=[per_input(:,1:ii-1) per_input(:,ii+1:end)];
                this_per_targets=[per_targets(:,1:ii-1) per_targets(:,ii+1:end)];
            end
        end
        
     
        
        %Create a net with the default perceptron
        net=perceptron;
        
        % Set up Division of Data for Training, Validation, Testing
        net.divideParam.trainRatio = 1;
        net.divideParam.valRatio = 0;
        net.divideParam.testRatio = 0;
        net.trainParam.showWindow = 0;
        
        % Train the Network
        [net,tr] = train(net,this_per_input,this_per_targets);
        
        %Calculate the trial that was left out
        one_out = per_input(:,ii);
        test_out(:,ii) = net(one_out);
        
        %Calculate a shuffled trial

        
        shuffled_trials=ceil(per_ii*rand(1,no_traces));
        
        for jj=1:num_traces
           one_shuffled(jj,1)=per_input(jj,shuffled_trials(jj)); 
        end
        
        shuffled_out(:,ii) = net(one_shuffled);
        
    end
    perceptron_correct(time_point)=100*sum(per_targets(1,:)==test_out(1,:))/per_ii;
    perceptron_correct_shuffled(time_point)=100*sum(per_targets(1,:)==shuffled_out(1,:))/per_ii;
    fprintf(1, '\nPercent correct classification by perceptron = %d, samples processed %d of %d\n',100*sum(per_targets(1,:)==test_out(1,:))/per_ii,time_point,length(time_to_event));
end

%save([CaimAn_name(1:end-12) '_pre.mat'])
save([CaimAn_name(1:end-12) '_perceptron.mat'])


figure(5)

hold on
%plot(time_to_event',perceptron_correct_shuffled,'-b')

per95=prctile(perceptron_correct_shuffled,95);
per5=prctile(perceptron_correct_shuffled,5);
CIsh=[mean(perceptron_correct_shuffled)-per5 per95-mean(perceptron_correct_shuffled)]';
[hlCR, hpCR] = boundedline([time_to_event(1) time_to_event(end)],[mean(perceptron_correct_shuffled) mean(perceptron_correct_shuffled)], CIsh', 'r');

plot(time_to_event',perceptron_correct,'-k')

%Odor on markers
plot([0 0],[0 100],'-k')
odorhl=plot([0 mean(delta_odor)],[20 20],'-k','LineWidth',5);
plot([mean(delta_odor) mean(delta_odor)],[0 100],'-k')

%Reinforcement markers
plot([mean(delta_odor_on_reinf_on) mean(delta_odor_on_reinf_on)],[0 100],'-r')
reinfhl=plot([mean(delta_odor_on_reinf_on) mean(delta_odor_on_reinf_on)+mean(delta_reinf)],[20 20],'-r','LineWidth',5);
plot([mean(delta_odor_on_reinf_on)+mean(delta_reinf) mean(delta_odor_on_reinf_on)+mean(delta_reinf)],[0 100],'-r')

title("Percent correct prediction by perceptron")
xlabel('Time (sec)')
ylabel('Percent correct')


pffft1=1;












